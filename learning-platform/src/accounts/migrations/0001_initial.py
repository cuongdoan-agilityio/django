# Generated by Django 5.1.4 on 2025-04-21 07:58

import accounts.validators
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import django_extensions.db.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Subject description", null=True
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="First name",
                        max_length=150,
                        null=True,
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Last name",
                        max_length=150,
                        null=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="email address", max_length=254, unique=True
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Phone number",
                        max_length=11,
                        null=True,
                        validators=[accounts.validators.validate_phone_number],
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="Date of birth",
                        null=True,
                        validators=[accounts.validators.validate_date_of_birth],
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "MALE"),
                            ("female", "FEMALE"),
                            ("other", "OTHER"),
                        ],
                        help_text="Male or Female",
                        max_length=6,
                        null=True,
                    ),
                ),
                (
                    "scholarship",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "ZERO"),
                            (25, "TWENTY_FIVE"),
                            (50, "FIFTY"),
                            (75, "SEVENTY_FIVE"),
                            (100, "FULL"),
                        ],
                        db_index=True,
                        default=0,
                        help_text="The scholarship amount for the student.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "degree",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("no", "NO"),
                            ("bachelor", "BACHELOR"),
                            ("master", "MASTER"),
                            ("doctorate", "DOCTORATE"),
                        ],
                        db_index=True,
                        default="no",
                        help_text="The degree of the instructor.",
                        max_length=9,
                        null=True,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("student", "STUDENT"),
                            ("instructor", "INSTRUCTOR"),
                            ("admin", "ADMIN"),
                        ],
                        default="student",
                        help_text="The role of the user.",
                        max_length=10,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "subjects",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The subjects that the instructor specializes in.",
                        null=True,
                        related_name="user",
                        to="accounts.subject",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
    ]
